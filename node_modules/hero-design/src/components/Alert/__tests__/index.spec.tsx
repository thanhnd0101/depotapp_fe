import React from 'react';
import userEvent from '@testing-library/user-event';
import renderWithTheme from '../../../testUtils/renderWithTheme';

import Alert, { getIconIntent, getAlertIcon, getThemeVariantIntent } from '..';

describe('Alert', () => {
  it('shows icon, title & content', () => {
    const { getByText, getByTestId } = renderWithTheme(
      <Alert title="A title" content="A content" />
    );

    expect(getByTestId('alert-icon')).toBeInTheDocument();
    expect(getByText('A title')).toBeInTheDocument();
    expect(getByText('A content')).toBeInTheDocument();
  });

  it('shows title & content only', () => {
    const { getByText, queryByTestId } = renderWithTheme(
      <Alert title="A title" content="A content" icon={null} />
    );

    expect(queryByTestId('alert-icon')).not.toBeInTheDocument();
    expect(getByText('A title')).toBeInTheDocument();
    expect(getByText('A content')).toBeInTheDocument();
  });

  it('shows close icon button when onClose is defined', () => {
    const onClose = jest.fn();
    const { getByTestId } = renderWithTheme(
      <Alert title="A title" content="A content" onClose={onClose} />
    );

    expect(getByTestId('close-button')).toBeInTheDocument();
    userEvent.click(getByTestId('close-button'));
    expect(onClose).toHaveBeenCalledTimes(1);
  });
});

describe('getIconIntent', () => {
  it.each`
    intent       | expectedIconIntent
    ${'success'} | ${'inherit'}
    ${'info'}    | ${'inherit'}
    ${'warning'} | ${'inherit'}
    ${'danger'}  | ${'inherit'}
    ${'error'}   | ${'inherit'}
  `(
    'returns inherit when variant is filled',
    ({ intent, expectedIconIntent }) => {
      expect(getIconIntent(intent, 'filled')).toBe(expectedIconIntent);
    }
  );

  it.each`
    intent       | expectedIconIntent
    ${'success'} | ${'success'}
    ${'info'}    | ${'primary'}
    ${'warning'} | ${'warning'}
    ${'danger'}  | ${'danger'}
    ${'error'}   | ${'error'}
  `(
    'returns $expectedIconIntent when variant is not filled',
    ({ intent, expectedIconIntent }) => {
      expect(getIconIntent(intent, 'outlined')).toBe(expectedIconIntent);
    }
  );
});

describe('getAlertIcon', () => {
  it('returns defaultIcon when icon is not defined', () => {
    expect(getAlertIcon('user', undefined)).toEqual({
      tag: 'Some',
      value: { left: 'user', tag: 'Left' },
    });
  });

  it('returns icon when icon is one of hero icons', () => {
    expect(getAlertIcon('user', 'add')).toEqual({
      tag: 'Some',
      value: { left: 'add', tag: 'Left' },
    });
  });

  it('returns icon element when icon is a ReactElement', () => {
    expect(getAlertIcon('user', <p>Icon</p>)).toEqual({
      tag: 'Some',
      value: { right: <p>Icon</p>, tag: 'Right' },
    });
  });

  it('returns none when icon is null', () => {
    expect(getAlertIcon('user', null)).toEqual({
      tag: 'None',
    });
  });
});

describe('getThemeVariantIntent', () => {
  it.each`
    originalIntent | expectedIntent
    ${'success'}   | ${'filled-success'}
    ${'info'}      | ${'filled-info'}
    ${'warning'}   | ${'filled-warning'}
    ${'danger'}    | ${'filled-danger'}
    ${'error'}     | ${'filled-error'}
  `(
    'returns filled intent when variant is filled',
    ({ originalIntent, expectedIntent }) => {
      expect(getThemeVariantIntent('filled', originalIntent)).toBe(
        expectedIntent
      );
    }
  );

  it.each`
    originalIntent | expectedIntent
    ${'success'}   | ${'outlined-success'}
    ${'info'}      | ${'outlined-info'}
    ${'warning'}   | ${'outlined-warning'}
    ${'danger'}    | ${'outlined-danger'}
    ${'error'}     | ${'outlined-error'}
  `(
    'returns outlined intent when variant is outlined',
    ({ originalIntent, expectedIntent }) => {
      expect(getThemeVariantIntent('outlined', originalIntent)).toBe(
        expectedIntent
      );
    }
  );
});
