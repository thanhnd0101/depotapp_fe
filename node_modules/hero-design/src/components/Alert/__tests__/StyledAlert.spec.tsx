import React from 'react';

import theme from '../../../theme';
import renderWithTheme from '../../../testUtils/renderWithTheme';

import {
  StyledIconWrapper,
  StyledAlert,
  StyledCloseButton,
} from '../StyledAlert';

describe('StyledIconWrapper', () => {
  it('returns default style', () => {
    const { container } = renderWithTheme(
      <StyledIconWrapper themeSize="default" themeVariant="filled" />
    );

    expect(container.firstChild).toHaveStyle(`
      margin-top: ${theme.space.alert.iconDefaultMarginTop};
      margin-right: ${theme.space.alert.iconDefaultMarginRight};
      line-height: ${theme.lineHeights.alert.iconDefault};
    `);
  });

  it('returns compact style', () => {
    const { container } = renderWithTheme(
      <StyledIconWrapper themeSize="compact" themeVariant="filled" />
    );

    expect(container.firstChild).toHaveStyle(`
      margin-top: ${theme.space.alert.iconCompactMarginTop};
      margin-right: ${theme.space.alert.iconCompactMarginRight};
      line-height: ${theme.lineHeights.alert.iconCompact};
    `);
  });

  it('returns white color', () => {
    const { container } = renderWithTheme(
      <StyledIconWrapper themeSize="compact" themeVariant="filled" />
    );

    expect(container.firstChild).toHaveStyle(`
      color: white;
    `);
  });

  it('returns inherit color', () => {
    const { container } = renderWithTheme(
      <StyledIconWrapper themeSize="compact" themeVariant="outlined" />
    );

    expect(container.firstChild).toHaveStyle(`
      color: inherit;
    `);
  });
});

describe('StyledAlert', () => {
  it('returns filled style', () => {
    const { container } = renderWithTheme(
      <StyledAlert
        themeIntent="success"
        themeSize="default"
        themeVariant="filled"
        themeVariantIntent="filled-success"
      />
    );

    expect(container.firstChild).toHaveStyle(`
      color: ${theme.colors.alert.textFilled};
      border-width: ${theme.borderWidths.alert.wrapperFilled};
    `);
  });

  it('returns outlined style', () => {
    const { container } = renderWithTheme(
      <StyledAlert
        themeIntent="success"
        themeSize="default"
        themeVariant="outlined"
        themeVariantIntent="outlined-success"
      />
    );

    expect(container.firstChild).toHaveStyle(`
      color: ${theme.colors.alert.textOutlined};
      border-width: ${theme.borderWidths.alert.wrapperOutlined};
    `);
  });

  it('returns default style', () => {
    const { container } = renderWithTheme(
      <StyledAlert
        themeIntent="success"
        themeSize="default"
        themeVariant="filled"
        themeVariantIntent="filled-success"
      />
    );

    expect(container.firstChild).toHaveStyle(`
      padding: ${theme.space.alert.defaultPadding};
    `);
  });

  it('returns compact style', () => {
    const { container } = renderWithTheme(
      <StyledAlert
        themeIntent="success"
        themeSize="compact"
        themeVariant="filled"
        themeVariantIntent="filled-success"
      />
    );

    expect(container.firstChild).toHaveStyle(`
      padding: ${theme.space.alert.compactPadding};
    `);
  });

  it.each`
    themeVariantIntent    | expectedBackground
    ${'filled-success'}   | ${theme.colors.alert.bgFilledSuccess}
    ${'filled-info'}      | ${theme.colors.alert.bgFilledInfo}
    ${'filled-warning'}   | ${theme.colors.alert.bgFilledWarning}
    ${'filled-danger'}    | ${theme.colors.alert.bgFilledDanger}
    ${'filled-error'}     | ${theme.colors.alert.bgFilledError}
    ${'outlined-success'} | ${theme.colors.alert.bgOutlinedSuccess}
    ${'outlined-info'}    | ${theme.colors.alert.bgOutlinedInfo}
    ${'outlined-warning'} | ${theme.colors.alert.bgOutlinedWarning}
    ${'outlined-danger'}  | ${theme.colors.alert.bgOutlinedDanger}
    ${'outlined-error'}   | ${theme.colors.alert.bgOutlinedError}
  `(
    'returns correct background color when intent variant is $themeVariantIntent',
    ({ themeVariantIntent, expectedBackground }) => {
      const { container } = renderWithTheme(
        <StyledAlert
          themeIntent="success"
          themeSize="compact"
          themeVariant="filled"
          themeVariantIntent={themeVariantIntent}
        />
      );

      expect(container.firstChild).toHaveStyle(`
        background-color: ${expectedBackground};
      `);
    }
  );

  it.each`
    themeIntent  | expectedBorderColor
    ${'success'} | ${theme.colors.alert.borderSuccess}
    ${'info'}    | ${theme.colors.alert.borderInfo}
    ${'warning'} | ${theme.colors.alert.borderWarning}
    ${'danger'}  | ${theme.colors.alert.borderDanger}
    ${'error'}   | ${theme.colors.alert.borderError}
  `(
    'returns correct border color when intent is $themeIntent',
    ({ themeIntent, expectedBorderColor }) => {
      const { container } = renderWithTheme(
        <StyledAlert
          themeIntent={themeIntent}
          themeSize="compact"
          themeVariant="filled"
          themeVariantIntent="filled-success"
        />
      );

      expect(container.firstChild).toHaveStyle(`
        border-color: ${expectedBorderColor};
      `);
    }
  );
});

describe('StyledCloseButton', () => {
  it('returns default style', () => {
    const { container } = renderWithTheme(
      <StyledCloseButton themeSize="default" themeVariant="filled" />
    );

    expect(container.firstChild).toHaveStyle(`
      margin-top: ${theme.space.alert.iconDefaultMarginTop};
      line-height: ${theme.lineHeights.alert.iconDefault}
    `);
  });

  it('returns compact style', () => {
    const { container } = renderWithTheme(
      <StyledCloseButton themeSize="compact" themeVariant="filled" />
    );

    expect(container.firstChild).toHaveStyle(`
      margin-right: ${theme.space.alert.iconCompactMarginRight};
      line-height: ${theme.lineHeights.alert.iconCompact}
    `);
  });

  it('returns white color', () => {
    const { container } = renderWithTheme(
      <StyledCloseButton themeSize="default" themeVariant="filled" />
    );

    expect(container.firstChild).toHaveStyle(`
      color: white;
    `);
  });

  it('returns inherit color', () => {
    const { container } = renderWithTheme(
      <StyledCloseButton themeSize="default" themeVariant="outlined" />
    );

    expect(container.firstChild).toHaveStyle(`
      color: inherit;
    `);
  });
});
