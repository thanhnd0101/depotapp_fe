import React, { ReactElement } from 'react';
import Icon from '../Icon';

import {
  StyledTag,
  CloseButton,
  Intent,
  Variant,
  FilledVariant,
  OutlinedVariant,
  ThemeVariant,
} from './StyledTag';

import { CommonProps } from '../common';

export interface TagProps extends CommonProps {
  /**
   * Visual intent color to apply to tag. It is required for `filled` and `outlined` variants.
   */
  intent?: 'primary' | 'success' | 'danger' | 'warning' | 'error';
  /**
   * Click handler for remove button, receiving tag's text and value.
   */
  onRemove?: (tag: {
    text: string | ReactElement;
    value?: string | number;
  }) => void;
  /**
   * Tag size.
   */
  size?: 'small' | 'medium' | 'large';
  /**
   * Tag label.
   */
  text: string | ReactElement;
  /**
   * Tag's uniq value. Use this when you wish to use removable tag to accientally remove tag with same text.
   */
  value?: string | number;
  /**
   * Tag type.
   */
  variant?: 'basic' | 'filled' | 'outlined';
}

const getFilledVariant = (intent: Intent): FilledVariant => {
  switch (intent) {
    case 'primary':
      return 'filled-primary';
    case 'success':
      return 'filled-success';
    case 'danger':
      return 'filled-danger';
    case 'warning':
      return 'filled-warning';
    case 'error':
      return 'filled-error';
  }
};

const getOutlinedVariant = (intent: Intent): OutlinedVariant => {
  switch (intent) {
    case 'primary':
      return 'outlined-primary';
    case 'success':
      return 'outlined-success';
    case 'danger':
      return 'outlined-danger';
    case 'warning':
      return 'outlined-warning';
    case 'error':
      return 'outlined-error';
  }
};

const getThemeVariant = (variant: Variant, intent: Intent): ThemeVariant => {
  switch (variant) {
    case 'basic':
      return variant;
    case 'filled':
      return getFilledVariant(intent);
    case 'outlined':
      return getOutlinedVariant(intent);
  }
};

const Tag = ({
  value,
  text,
  variant = 'basic',
  intent = 'primary',
  size = 'medium',
  onRemove,
  id,
  className,
  style,
  'data-test-id': dataTestId,
}: TagProps): ReactElement => {
  const themeVariant = getThemeVariant(variant, intent);

  return (
    <StyledTag
      themeVariant={themeVariant}
      themeSize={size}
      id={id}
      className={className}
      style={style}
      data-test-id={dataTestId}
    >
      {text}
      {onRemove !== undefined && (
        <CloseButton
          type="button"
          themeVariant={themeVariant}
          onClick={(e): void => {
            e.preventDefault();
            onRemove({ text, value });
          }}
        >
          <Icon icon="cancel" />
        </CloseButton>
      )}
    </StyledTag>
  );
};

export default Tag;
