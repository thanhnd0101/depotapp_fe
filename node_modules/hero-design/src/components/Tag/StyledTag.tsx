import styled, {
  css,
  FlattenInterpolation,
  ThemeProps,
  DefaultTheme,
} from 'styled-components';

type Intent = 'primary' | 'success' | 'danger' | 'warning' | 'error';

type Variant = 'basic' | 'filled' | 'outlined';

type BackgroundIntent =
  | 'primaryBackground'
  | 'successBackground'
  | 'dangerBackground'
  | 'warningBackground'
  | 'errorBackground';

type HoverCloseBtnIntent =
  | 'hoverPrimaryCloseBtn'
  | 'hoverSuccessCloseBtn'
  | 'hoverDangerCloseBtn'
  | 'hoverWarningCloseBtn'
  | 'hoverErrorCloseBtn';

type ActiveCloseBtnIntent =
  | 'activePrimaryCloseBtn'
  | 'activeSuccessCloseBtn'
  | 'activeDangerCloseBtn'
  | 'activeWarningCloseBtn'
  | 'activeErrorCloseBtn';

type FilledVariant =
  | 'filled-primary'
  | 'filled-success'
  | 'filled-danger'
  | 'filled-warning'
  | 'filled-error';

type OutlinedVariant =
  | 'outlined-primary'
  | 'outlined-success'
  | 'outlined-danger'
  | 'outlined-warning'
  | 'outlined-error';

type ThemeVariant = 'basic' | FilledVariant | OutlinedVariant;

const getBackgroundIntent = (intent: Intent): BackgroundIntent => {
  switch (intent) {
    case 'primary':
      return 'primaryBackground';
    case 'success':
      return 'successBackground';
    case 'danger':
      return 'dangerBackground';
    case 'warning':
      return 'warningBackground';
    case 'error':
      return 'errorBackground';
  }
};

const getHoverCloseBtnIntent = (intent: Intent): HoverCloseBtnIntent => {
  switch (intent) {
    case 'primary':
      return 'hoverPrimaryCloseBtn';
    case 'success':
      return 'hoverSuccessCloseBtn';
    case 'danger':
      return 'hoverDangerCloseBtn';
    case 'warning':
      return 'hoverWarningCloseBtn';
    case 'error':
      return 'hoverErrorCloseBtn';
  }
};

const getActiveCloseBtnIntent = (intent: Intent): ActiveCloseBtnIntent => {
  switch (intent) {
    case 'primary':
      return 'activePrimaryCloseBtn';
    case 'success':
      return 'activeSuccessCloseBtn';
    case 'danger':
      return 'activeDangerCloseBtn';
    case 'warning':
      return 'activeWarningCloseBtn';
    case 'error':
      return 'activeErrorCloseBtn';
  }
};

const genFilledStyles = (
  intent: Intent
): FlattenInterpolation<ThemeProps<DefaultTheme>> => css`
  color: white;
  border-color: ${({ theme }) => theme.colors.tag[intent]};
  background: ${({ theme }) => theme.colors.tag[intent]};
`;

const genOutlinedStyles = (
  intent: Intent
): FlattenInterpolation<ThemeProps<DefaultTheme>> => css`
  color: ${({ theme }) => theme.colors.tag[intent]};
  border-color: ${({ theme }) => theme.colors.tag[intent]};
  background: ${({ theme }) => theme.colors.tag[getBackgroundIntent(intent)]};
`;

const genCloseBtnFilledStyles = (
  intent: Intent
): FlattenInterpolation<ThemeProps<DefaultTheme>> => css`
  color: ${({ theme }) => theme.colors.tag.closeBtn};
  &:hover {
    color: ${({ theme }) => theme.colors.tag[getHoverCloseBtnIntent(intent)]};
  }
  &:active {
    color: ${({ theme }) => theme.colors.tag[getActiveCloseBtnIntent(intent)]};
  }
`;

const genCloseBtnOutlinedStyles = (
  intent: 'primary' | 'danger' | 'success' | 'warning' | 'error'
): FlattenInterpolation<ThemeProps<DefaultTheme>> => css`
  color: ${({ theme }) => theme.colors.tag[intent]};
  &:hover {
    color: ${({ theme }) => theme.colors.tag[getHoverCloseBtnIntent(intent)]};
  }
  &:active {
    color: ${({ theme }) => theme.colors.tag[getActiveCloseBtnIntent(intent)]};
  }
`;

const CloseButton = styled.button<{ themeVariant: ThemeVariant }>`
  display: flex;
  align-items: center;
  border: none;
  background: transparent;
  margin: 0;
  padding: ${({ theme }) => theme.space.tag.closeBtnPadding};
  font-size: ${({ theme }) => theme.fontSizes.tag.closeBtn};

  &:hover {
    cursor: pointer;
  }

  &:focus {
    outline: none;
  }

  ${({ themeVariant, theme }) => {
    switch (themeVariant) {
      case 'basic':
        return css`
          color: ${theme.colors.tag.basicCloseBtn};
          &:hover {
            color: ${theme.colors.tag.defaultBorder};
          }
          &:active {
            color: ${theme.colors.tag.defaultText};
          }
        `;
      case 'filled-primary':
        return genCloseBtnFilledStyles('primary');
      case 'filled-success':
        return genCloseBtnFilledStyles('success');
      case 'filled-danger':
        return genCloseBtnFilledStyles('danger');
      case 'filled-warning':
        return genCloseBtnFilledStyles('warning');
      case 'filled-error':
        return genCloseBtnFilledStyles('error');
      case 'outlined-primary':
        return genCloseBtnOutlinedStyles('primary');
      case 'outlined-success':
        return genCloseBtnOutlinedStyles('success');
      case 'outlined-danger':
        return genCloseBtnOutlinedStyles('danger');
      case 'outlined-warning':
        return genCloseBtnOutlinedStyles('warning');
      case 'outlined-error':
        return genCloseBtnOutlinedStyles('error');
    }
  }};
`;

const StyledTag = styled.span<{
  themeSize: 'small' | 'medium' | 'large';
  themeVariant: ThemeVariant;
}>`
  display: inline-flex;
  align-items: center;
  box-sizing: border-box;
  border: ${({ theme }) => theme.borderWidths.tag.default} solid;
  border-radius: ${({ theme }) => theme.radii.tag.default};
  font-weight: ${({ theme }) => theme.fontWeights.tag.default};
  line-height: 1;
  margin: 0;
  padding: 0;

  ${({ themeSize, theme }) => {
    switch (themeSize) {
      case 'small':
        return css`
          font-size: ${theme.fontSizes.tag.small};
          padding: ${theme.space.tag.smallPadding};
        `;
      case 'medium':
        return css`
          font-size: ${theme.fontSizes.tag.medium};
          padding: ${theme.space.tag.mediumPadding};
        `;
      case 'large':
        return css`
          font-size: ${theme.fontSizes.tag.large};
          padding: ${theme.space.tag.largePadding};
        `;
    }
  }};

  ${({ themeVariant, theme }) => {
    switch (themeVariant) {
      case 'basic':
        return css`
          border-color: ${theme.colors.tag.defaultBorder};
          background: ${theme.colors.tag.defaultBackground};
        `;
      case 'filled-primary':
        return genFilledStyles('primary');
      case 'filled-success':
        return genFilledStyles('success');
      case 'filled-danger':
        return genFilledStyles('danger');
      case 'filled-warning':
        return genFilledStyles('warning');
      case 'filled-error':
        return genFilledStyles('error');
      case 'outlined-primary':
        return genOutlinedStyles('primary');
      case 'outlined-success':
        return genOutlinedStyles('success');
      case 'outlined-danger':
        return genOutlinedStyles('danger');
      case 'outlined-warning':
        return genOutlinedStyles('warning');
      case 'outlined-error':
        return genOutlinedStyles('error');
    }
  }};
`;

export {
  StyledTag,
  CloseButton,
  Intent,
  Variant,
  FilledVariant,
  OutlinedVariant,
  ThemeVariant,
};
