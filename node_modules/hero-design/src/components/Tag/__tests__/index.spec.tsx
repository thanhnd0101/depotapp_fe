import React from 'react';
import userEvent from '@testing-library/user-event';
import renderWithTheme from '../../../testUtils/renderWithTheme';

import Tag from '..';

describe('rendering', () => {
  it('shows tag content', () => {
    const { getByText } = renderWithTheme(<Tag text="Tag text" />);
    expect(getByText('Tag text')).toBeInTheDocument();
  });
});

describe('interaction', () => {
  it('allows to click on it', () => {
    const onRemove = jest.fn();
    const { getByRole } = renderWithTheme(
      <Tag value={1} text="Tag text" onRemove={onRemove} />
    );

    userEvent.click(getByRole('button'));

    expect(onRemove).toHaveBeenCalledTimes(1);
    expect(onRemove).toHaveBeenCalledWith({ text: 'Tag text', value: 1 });
  });
});

describe('with variant/intent', () => {
  it.each`
    variant       | intent
    ${'basic'}    | ${'primary'}
    ${'basic'}    | ${'primary'}
    ${'filled'}   | ${'primary'}
    ${'outlined'} | ${'primary'}
    ${'basic'}    | ${'success'}
    ${'filled'}   | ${'success'}
    ${'outlined'} | ${'success'}
    ${'basic'}    | ${'danger'}
    ${'filled'}   | ${'danger'}
    ${'outlined'} | ${'danger'}
    ${'basic'}    | ${'warning'}
    ${'filled'}   | ${'warning'}
    ${'outlined'} | ${'warning'}
    ${'basic'}    | ${'error'}
    ${'filled'}   | ${'error'}
    ${'outlined'} | ${'error'}
  `('renders correctly with $variant & $intent', ({ variant, intent }) => {
    const { container } = renderWithTheme(
      <Tag variant={variant} intent={intent} text="A text" />
    );

    expect(container.firstChild).toMatchSnapshot();
  });

  it.each`
    variant       | intent
    ${'basic'}    | ${'primary'}
    ${'basic'}    | ${'primary'}
    ${'filled'}   | ${'primary'}
    ${'outlined'} | ${'primary'}
    ${'basic'}    | ${'success'}
    ${'filled'}   | ${'success'}
    ${'outlined'} | ${'success'}
    ${'basic'}    | ${'danger'}
    ${'filled'}   | ${'danger'}
    ${'outlined'} | ${'danger'}
    ${'basic'}    | ${'warning'}
    ${'filled'}   | ${'warning'}
    ${'outlined'} | ${'warning'}
    ${'basic'}    | ${'error'}
    ${'filled'}   | ${'error'}
    ${'outlined'} | ${'error'}
  `(
    'renders correctly when hovered on close button with $variant & $intent',
    ({ variant, intent }): void => {
      const { getByRole } = renderWithTheme(
        <Tag
          variant={variant}
          intent={intent}
          text="A text"
          onRemove={jest.fn()}
        />
      );

      userEvent.hover(getByRole('button'));

      expect(getByRole('button')).toMatchSnapshot();
    }
  );
});

describe('with size', () => {
  it.each`
    size
    ${'small'}
    ${'medium'}
    ${'large'}
  `('renders correctly with $size', ({ size }) => {
    const { container } = renderWithTheme(<Tag size={size} text="A text" />);
    expect(container.firstChild).toMatchSnapshot();
  });
});
