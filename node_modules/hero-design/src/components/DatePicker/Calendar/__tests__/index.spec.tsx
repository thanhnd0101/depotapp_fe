import React from 'react';
import { waitFor, fireEvent } from '@testing-library/react';
import renderWithTheme from '../../../../testUtils/renderWithTheme';

import Calendar from '../index';

describe('rendering', () => {
  it('renders calendar correctly', async () => {
    const { getByText, getByDisplayValue } = renderWithTheme(
      <Calendar
        selectedDate={new Date(2021, 1, 19)}
        minDate={new Date(2021, 1, 1)}
        maxDate={new Date(2021, 1, 23)}
      />
    );

    await waitFor(() => {
      // shows month in select
      expect(getByDisplayValue('Feb')).toBeInTheDocument();
      // shows year in select
      expect(getByDisplayValue('2021')).toBeInTheDocument();
      // shows days of week
      expect(getByText('Su')).toBeInTheDocument();
      expect(getByText('Mo')).toBeInTheDocument();
      expect(getByText('Tu')).toBeInTheDocument();
      expect(getByText('We')).toBeInTheDocument();
      expect(getByText('Th')).toBeInTheDocument();
      expect(getByText('Fr')).toBeInTheDocument();
      expect(getByText('Sa')).toBeInTheDocument();
      // shows selected date
      expect(getByText('19')).toBeInTheDocument();
      // shows disabled date
      expect(getByText('31')).toBeInTheDocument();
      expect(getByText('24')).toBeInTheDocument();
      // shows normal date
      expect(getByText('18')).toBeInTheDocument();
    });
  });
});

describe('interaction', () => {
  it('allows to select month and year', async () => {
    const { getByText, getByDisplayValue } = renderWithTheme(
      <Calendar selectedDate={new Date(2021, 1, 19)} />
    );

    fireEvent.click(getByDisplayValue('Feb'));
    fireEvent.click(getByText('Mar'));

    await waitFor(() => {
      expect(getByDisplayValue('Mar')).toBeInTheDocument();
    });

    fireEvent.click(getByDisplayValue('2021'));
    fireEvent.click(getByText('2025'));

    await waitFor(() => {
      expect(getByDisplayValue('2025')).toBeInTheDocument();
    });
  });

  it('allows to select a new date', async () => {
    const onSelectDate = jest.fn();
    const { getByText, getByDisplayValue } = renderWithTheme(
      <Calendar
        selectedDate={new Date(2021, 1, 19)}
        onSelectDate={onSelectDate}
      />
    );

    fireEvent.click(getByDisplayValue('Feb'));
    fireEvent.click(getByText('Mar'));
    fireEvent.click(getByDisplayValue('2021'));
    fireEvent.click(getByText('2025'));
    fireEvent.click(getByText('10'));

    await waitFor(() => {
      expect(onSelectDate).toHaveBeenCalledTimes(1);
      expect(onSelectDate).toHaveBeenCalledWith(new Date(2025, 2, 10));
    });
  });

  it('does not allow to select a new date out of range', async () => {
    const onSelectDate = jest.fn();
    const { getByText } = renderWithTheme(
      <Calendar
        selectedDate={new Date(2021, 1, 19)}
        minDate={new Date(2021, 1, 3)}
        maxDate={new Date(2021, 1, 20)}
        onSelectDate={onSelectDate}
      />
    );

    fireEvent.click(getByText('28'));

    await waitFor(() => {
      expect(onSelectDate).not.toHaveBeenCalled();
    });
  });
});
