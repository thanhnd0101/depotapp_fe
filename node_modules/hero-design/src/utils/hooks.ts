import { useLayoutEffect, useMemo } from 'react';
import { isNonEmptyArray } from '../fp/NonEmptyArray';

type Dimensions = {
  height: number;
  width: number;
};

const useNativeResizeObserver = (
  resizeCallback: (dimensions: Dimensions) => void,
  refElement: HTMLElement | null
): void => {
  useLayoutEffect(() => {
    if (refElement === null) return;
    const resizeObserver = new ResizeObserver(entries => {
      if (isNonEmptyArray(entries)) {
        const targetElement = entries[0].target as HTMLElement;
        resizeCallback({
          height: targetElement.offsetHeight,
          width: targetElement.offsetWidth,
        });
      }
    });

    resizeObserver.observe(refElement);

    return (): void => resizeObserver.unobserve(refElement);
  }, [resizeCallback, refElement]);
};

const useCustomResizeObserver = (
  resizeCallback: (dimensions: Dimensions) => void,
  refElement: HTMLElement | null
): void => {
  const width = refElement !== null ? refElement.offsetWidth : 0;
  const height = refElement !== null ? refElement.offsetHeight : 0;

  useLayoutEffect(() => {
    resizeCallback({ width, height });
  }, [width, height, resizeCallback]);
};

const useResizeObserver = (
  resizeCallback: (dimensions: Dimensions) => void,
  refElement: HTMLElement | null
): void => {
  const observer = useMemo(() => {
    return typeof window !== 'undefined' && window.ResizeObserver !== undefined
      ? useNativeResizeObserver
      : useCustomResizeObserver;
  }, []);
  observer(resizeCallback, refElement);
};

export { useResizeObserver };
